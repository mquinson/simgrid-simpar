#+TITLE: Internship Report
#+AUTHOR: Ezequiel Torti Lopez
#+OPTIONS: num:nil ^:nil f:nil
#+LATEX_HEADER: \documentclass{article}
#+LATEX_HEADER: \usepackage{amscd}
#+LATEX_HEADER: \usepackage{wrapfig}
#+STARTUP: hideblocks
#+PROPERTY: session *R* 

#+begin_LaTeX
  \hypersetup{
    linkcolor=blue,
    pdfborder={0 0 0 0}
  }
  \lstset{basicstyle=\ttfamily\bfseries\small}
#+end_LaTeX

#+begin_src R  :exports none
library('ggplot2')
library('gridExtra')
library('reshape')
library('plyr')
library('data.table')
#+end_src

#+LaTeX: \begin{document}


#+LaTeX: \section{Motivation and Problem Statement}

Simulation is the third pillar of science, allowing to study complicated
phenomenons through complex models. When the size or complexity of the studied
models becomes too large, it is classical to leverage more resources through
Parallel Discrete-Event Simulation (PDES).  

Still, the parallel simulation of very fine grained applications deployed on
large-scale distributed systems (LSDS) remains challenging. As a matter of fact,
most simulators of Peer-to-Peer systems are sequential, despite the vast
literature on PDES over the last three decades.

dPeerSim is one of the very few existing PDES for P2P systems, but it presents
deceiving performance: it can achieve a decent speedup when increasing the
amount of logical processes (LP): from 4h with 2 LPs down to 1h with 16 LPs.
But it remains vastly inefficient when compared to sequential version of
PeerSim, that performs the same experiment in 50 seconds only. This calls for a
new parallel schema specifically tailored to this category of Discrete Event
Simulators.

Discrete Event Simulation of Distributed Applications classically alternates
between simulation phases where the models compute the next event date, and
phases where the application workload is executed.  We proposed

in~\cite{previous} to not split the simulation model across several computing
nodes, but instead to keep the model sequential and execute the application
workload in parallel when possible. We hypothesized that this would help
reducing the synchronization costs. We evaluate our contribution with very fine
grained workloads such as P2P protocols. These workloads are the most difficult
to execute efficiently in parallel because execution times are very short,
making it very difficult to amortize the synchronization times.

We implemented this parallel schema within the SimGrid framework, and showed
that the extra complexity does not endangers the performance since the
sequential version of SimGrid still outperforms several competing solutions when
our addition are present but disabled at run time.

To the best of our knowledge, it is the first time that a parallel simulation of
P2P system proves to be faster that the best known sequential execution. Yet,
the parallel simulation only outperforms sequential one when the amount of
processes becomes large enough. This is because of the pigonhole principle: when
the amount of processes increases, the average amount of processes that are
ready to run at each simulated timestamp (and can thus run in parallel)
increases. When simulating the Chord protocol, it takes 500,000 processes or
more to amortizing the synchronization costs, while the classical studies of the
literature usually involve less processes.

The current work aims at further improving the performance of our PDES, using
several P2P protocols as a workload. We investigate the possible inefficiency
and propose generic solutions that could be included in other similar simulators
of large-scale distributed systems, be them P2P simulators of cloud, HPC or
sensornets ones.

This paper is organized as follows: Section \ref{sec:context} recaps the SimGrid
architecture and quickly presents the parallel execution schema detailed
in \cite{previous}. Section \ref{sec:problem} analysis the
theoretical performance bound, and discusses the previous work at the light of
the Amhdal law. Section \ref{sec:parallel} explores several trade-offs for
the efficiency of the parallel sections. Section \ref{sec:adaptive} proposes
an algorithm to automatically tune the level of parallelism that is adapted to
the simulated application. Section \ref{sec:cc} concludes this paper and discusses
some future work.


#+LaTeX: \section{Context}\label{sec:context}

In the previous work ~\cite{previous} we proposed to parallelize the execution
of the user code while keeping the simulation engine sequential.
This is enabled by applying classical concepts of OS design to this new context:
every interaction between the user processes (from now on, user processes and
processes mean the same thing) and the simulated environment passes
through a specific layer that act as an OS kernel.

A novel way to virtualize user processes (\emph{raw contexts}) was
crafted to improve efficiency and avoid unnecesary system calls, 
but other ways to do this can be found for the sake of portability, such as full
featured threads, or POSIX ucontexts. A new data structure to store the shared
state of the system and synchronize the process execution was
implemented as well.

A new specific layer that acts as the OS kernel was implemented in SimGrid to
emulate systems calls, called \emph{requests}, and each time a user process
want to interact with other process, or the kernel itself, it raises
a \emph{request}.
After that, the engine takes control of the program and answer the
\emph{requests} of each process. This way the user processes can be parallelized
in a safe manner.

Experimental results showed that the new design does not hinder the tool
scalability. In fact, the sequential version of SimGrid remains orders of
magnitude more scalable than state of the art simulators.
The difficulty to get a parallel version of a P2P simulator faster than its
sequential counterpart was also revealed in ~\cite{previous}, being the first
time that a parallel simulation of Chord runs faster than the best known
sequential implementation.

An interesting result showed in the previous work is that the speedups only
increased up to a certain point when increasing the amount of working threads.
We also have proved that for small instances, parallelism actually hinders the
performance, and that the relative gain of parallelism seems even strictly
increasing with the system size.

Now we are closer to the optimal Amdahl's law threshold, that means that we have
reach a limit on the parallelizable portions of the code in our proposed model.
The remaining optimizations seek for a final speedup, trying to get a better
parallel threshold dynamically depending on the simulation, and better
performance of the threads taking in count their distribution on the CPU cores
and the different synchronization modes (futex, POSIX primitives or busy waiters).

#+LaTeX: \section{Performance Analysis}\label{sec:problem}
#+LaTeX: \subsection{Current speedup achieved} %Also, the benchmarking not intrusive is here.
We want to find the maximum speedup achieved with our current parallel
model. For that, a benchmark test is run to get the timings of
typical sequential and parallel executions, so we can get the real speedup achieved with
our system using the Amdahl's law.

But first we want to prove that our benchmarks are not intrusive,
that is, our measures do not really affect the overall performance
of the system. For that, the experiments are run with and without
benchmarking, using the Precise mode, and then a comparation of
both is made to find if there is a significative breach in the
timings of both experiments.

Using the Chord simulation, the experiment showed us that the maximum difference in the execution
time of both versions is lesser than 10% in most of the cases, and is even lower with
sizes bigger that 100000 nodes, which allow us to conclude that the benchmarking is,
indeed, not intrusive.

The experiment to calculate speedups involves the Chord simulation as well,
using the Precise model of our engine, and running it with 2,4,8,16 and 24 threads.
The actual speedup obtained can be seen in the Figure \ref{fig:one}.
It is clear from that graph that the real speedup with our parallel model is obtained
when the size of the problem is bigger than 100000 nodes.
This confirms what we have proved in ~\cite{previous}.

#+name: amdahl-speedup
#+begin_src R  :results output graphics :exports results :file amdahl-speedup.pdf
orig_data = read.table("./optimizations_experiments/timings/total_times_noamdahl2.log")
opt_data = read.table("./optimizations_experiments/timings/total_sum_times_amdahl2.log")
orig_data = as.data.frame.matrix(orig_data)
opt_data = as.data.frame.matrix(opt_data)
data <- data.frame(nodes =  orig_data[1:8,1], seq = opt_data[1:8,8], t2 = opt_data[1:8,9],
                   t4 = opt_data[1:8,10], t8 = opt_data[1:8,11], t16 = opt_data[1:8,12],
                   t24 = opt_data[1:8,13])
# an extra seq column to average would be good too.
data[, "speedup2"] <- data[, "seq"] / data[, "t2"]
data[, "speedup4"] <- data[, "seq"] / data[, "t4"]
data[, "speedup8"] <- data[, "seq"] / data[, "t8"]
data[, "speedup16"] <- data[, "seq"] / data[, "t16"]
data[, "speedup24"] <- data[, "seq"] / data[, "t24"]
data[, "base"] <- data[, "seq"] / data[, "seq"]


data[, "t2"] <- NULL
data[, "t4"] <- NULL
data[, "t8"] <- NULL
data[, "t16"] <- NULL
data[, "t24"] <- NULL
data[, "seq"] <- NULL

df <- melt(data ,  id = 'nodes', variable_name = 'versions')
ggplot(df, aes(x=nodes,y=value, group=versions, colour=versions)) + geom_line() #+ scale_colour_continuous(guide=FALSE)
#+end_src

#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:one
#+caption: Real speedup achieved using parallell mode in Chord simulation.
#+results: amdahl-speedup
[[file:amdahl-speedup.pdf]]

#+LaTeX: \subsection{Parallelizable portions of the problem}
This experiment is based on a typical Chord simulation, and the data wanted
is the following: ID of each Scheduling Round, time taken by each Scheduling Round
and number of process executed in each scheduling round.

What we want to prove is that the limit on the speed up reached is due to the fact
that we are very closer to the line that define what is parallelizable in our model
and what is exeuted sequentially.
As it can be seen in the Figure \ref{fig:two} , the amount of processes computed by each scheduling
round is only one most of the times, so the parallel execution is not possible in that
instances. The remaining processes are executed in parallel due to the parallel
execution threshold already setted up in SimGrid (which can be modified), but it only
represents the 31\% of the total amount of user processes in a typical run.

#+name: sr-distribution
#+begin_src R  :results output graphics :exports results  :file sr-distribution.pdf

#temp = list.files(path='./optimizations_experiments/sr_counts', pattern="*precise*", full.names = TRUE)
temp = list.files(path='./optimizations_experiments/sr_counts', pattern="sr_3000_threads24_constant.log", full.names = TRUE)
flist <- lapply(temp, read.table)
sr_data <- rbindlist(flist)
sr_data[, "V1"] <- NULL
sr_data = as.data.frame.matrix(sr_data)

#ggplot(data=sr_data, geom="histogram", aes(x=V3)) + xlim(0,15) + geom_histogram(binwidth=0.5,aes(y=..count../sum(..count..))) + xlab("Amount of processes") + ylab("Percentage of Scheduling Rounds")
#ggplot(data=sr_data, geom="histogram", aes(x=V3)) + xlim(1,15) + geom_histogram(binwidth=0.5,aes(y=..count../sum(..count..))) + xlab("Amount of processes") + ylab("Percentage of Scheduling Rounds") + scale_x_continuous(breaks=c(1:15), labels=c(1:15),limits=c(1,15))
ggplot(data=sr_data, geom="histogram", aes(x=V3)) + ylim(0,0.7)+ xlim(1,13) + geom_histogram(binwidth=0.5,aes(y=..count../sum(..count..)), origin=-0.5) + xlab("Amount of processes") + ylab("Percentage of Scheduling Rounds") + scale_x_continuous(breaks=c(1:13), labels=c(1:13),limits=c(1,13)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank()) #, axis.line = element_line(colour = "black"))

#+end_src

#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:two
#+caption: Proportion of scheduling rounds computing processes.
#+results: sr-distribution
[[file:sr-distribution.pdf]]


Besides that, the Figure \ref{fig:three} show that when the amount of processes is bigger,
then the sequential execution time is bigger. That means that parallelizing that remaining 31\%
of processes is what achieves the current speedup.

#+name: sr-times
#+begin_src R  :results output graphics :exports results  :file sr-times.pdf

temp = list.files(path='./optimizations_experiments/sr_counts/sequential', pattern="*precise*", full.names = TRUE)

flist <- lapply(temp, read.table)
sr_data <- rbindlist(flist)
sr_data[, "V1"] <- NULL
sr_data = as.data.frame.matrix(sr_data)
#for the mean
df <- ddply(sr_data, .(V3), summarize, mean_value = mean(V2))
ggplot(data=df, geom="histogram", aes(x=V3, y=mean_value)) + xlim(0,2000) + xlab("") + ylab("") + ylim(0,0.005) + geom_point(size = 1)
#+end_src

#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:three
#+caption: Mean of times depending on the amount of processes of each scheduling round.
#+results: sr-times
[[file:sr-times.pdf]]




#+LaTeX: \section{Optimizations}\label{sec:parallel}
#+LaTeX: \subsection{Binding threads to physical cores}
Regarding the multicore architectures (like almost every modern CPU),
parallelization through threads is well proved to be a good optimization,
as we said in the previous section \ref{sec:problem}. But there are still
some improvements that can be done.

Thread execution depends heavily on the operative system scheduler: when one
thread is \emph{idle}, the scheduler may decide to switch it for another thread
ready to work, so it can maximize the occupancy of the cpu cores, and probably,
run a program in a faster way. Or it may just want to switch threads
because their execution time quote is over.

And when the first thread is ready to work again, the cpu core where it
was before might be occupied, forcing the system to run the thread in
another core. Of course this depend on which scheduler implementation we are using.

Regardless of the situation, migration of threads between cores entails an
increase of cache misses, and the amount of CPU migrations in a big size
simulation can be detrimental for the performance.

In order to avoid these CPU migrations produced by a constant context switching
of threads, Glib offers a way to bind each thread to a physical core
of the CPU. Note that this is only available in Linux platforms.

A Chord simulation was run in a parapluie node, with 24 cores, binding the threads to
physical cores. The CPU migration
was drastically reduced (almost 97\% less migrations) in all the cases.
The speedup obtained with few threads (2, 4 and 8) was not big enough: x1.63 in
the best case, and x1.23 in average.
But when the simulation is run with a bigger amount of threads (16 or 24), the
impact of having less CPU migrations is notable, being obtained speedups between
x2.44 and almost x15 (depending on the amount of threads and the size of the
simulation).
This proves that physical binding of threads to CPU cores can be useful when a
big amount of threads is needed.


#+LaTeX: \subsection{Parmap between N cores}

Several optimizations regarding the distribution of work between threads were
proposed: the first option is the default one, where maestro works with its
threads and the processes are distributed equitably between each thread; the
second one is to  send maestro to sleep and let the worker threads do all the
computing; the last one involves the creation of one extra thread and make all
this N threads work while maestro sleeps.

The experiments were made using up to 75000 nodes in a Chord simulation with
Precise and Constant modes, but no performance gain was achieved. In fact, the
creation of one extra thread proved to be slightly more slower than the original
version of parmap, while sending maestro to sleep and make its N-1 threads
do the computation did not show any improvement or loss in performance.

#+LaTeX: \subsection{Busy Waiters}

#+LaTeX: \subsection{Performance Regression Testing}

#+LaTeX: \section{Optimal threshold for parallel execution}\label{sec:adaptive}
#+LaTeX: \subsection{Getting a real threshold over simulations}
The threshold wanted is how many processes are the right amount to be executed
in parallel when it is necessary, and when is it better to execute them in a
sequential way.
Initially, what we want is to find an optimal threshold for the beginning of
any simulation.
For that purpose, we have done a benchmark of the scheduling rounds timings in parallel and sequential
executions, and have found the best average option for a simulation.

#+name: sr-par-threshold
#+begin_src R :results output graphics :exports results   :file sr-par-threshold.pdf
#SEQUENTIAL
temp = list.files(path='./optimizations_experiments/sr_counts/sequential2', pattern="*.log", full.names = TRUE)
flist <- lapply(temp, read.table)
sr_data <- rbindlist(flist) #TODO: SE PUEDE SACAR, CREO
sr_data[, "V1"] <- NULL
sr_data = as.data.frame.matrix(sr_data)
df <- ddply(sr_data, .(V3), summarize, mean_value = mean(V2))

#PARALLEL:
temp2 = list.files(path='./optimizations_experiments/sr_counts/parallel', pattern="*.log", full.names = TRUE)
flist2 <- lapply(temp2, read.table)
sr_data2 <- rbindlist(flist2) #TODO: SE PUEDE SACAR, CREO
sr_data2[, "V1"] <- NULL
sr_data2 = as.data.frame.matrix(sr_data2)
df2 <- ddply(sr_data2, .(V3), summarize, mean_value = mean(V2))

#merge this two datasets
df3 = merge(df, df2, by.x = 'V3', by.y = 'V3', incomparables = NULL)
df3[, 'speedup'] <- df3[,'mean_value.x'] / df3[, 'mean_value.y']
#for the mean
ggplot(data=df3, geom="histogram", aes(x=V3, y=speedup)) + xlab("") + ylab("") +geom_line() + xlim(1,100)

#g <- ggplot(data=df3, geom="histogram", aes(x=V3, y=speedup)) + xlab("") + ylab("") +geom_line()
#+end_src

#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:four
#+caption: Speedup obtained in relation with the amount of processes computed by scheduling round.
#+results:sr-par-threshold
[[file:sr-par-threshold.pdf]]

As it can be seen in the Figure \ref{fig:four}, despite being in a
constant or precise model, the speedup can be found starting from
33 user processes.

#+LaTeX: \subsection{Adaptive algorithm to calculate threshold}
Finding an optimal threshold and keep it during all the simulation might not
always be the best option: some simulations can take more or less time in
the execution of user processes. If a simulation has
very efficient processes, or processes that don't work too much, then the
threshold could be inapropiate, leading to parallelize scheduling rounds
that would run more efficiently in a sequential way.
That's why an algorithm for a dynamic threshold calculation is proposed.

The main idea behind this heuristic is to calculate the optimal number
of processes that can be run in parallel during the execution of the
simulation.

For that purpose, the times of five scheduling round are measured.
A performance ratio for both of the possible parallel and sequential executions is
calculated, simply by dividing the time taken by the amount of processes
computed.
If the sequential ratio turns to be bigger than the parallel one, then the 
threshold is decreased, and increased otherwise.

This results in a slight improve of performance, as it can be seen on
Figure \ref{fig:five}. This optimization, however, seems to be effective
when the amount of nodes is bigger than XXXXX.



#+name: adapt-algorithm
#+begin_src R  :results output graphics :exports results  :file adapt-algorithm.pdf

orig_data = read.table("./optimizations_experiments/dynamic_threshold/optimization3.dat")
opt_data = read.table("./optimizations_experiments/dynamic_threshold/optimization3_part2.dat")
orig_data = as.data.frame.matrix(orig_data)
opt_data = as.data.frame.matrix(opt_data)
#data <- data.frame(nodes =  orig_data[1:4,1], thr4const=orig_data[1:4,2], thr8const=orig_data[1:4,3], thr16const=orig_data[1:4,4], thr4prec=orig_data[1:4,5],thr8prec=orig_data[1:4,6],thr16prec=orig_data[1:4,7],optthr4const=opt_data[1:4,2], optthr8const=opt_data[1:4,3], optthr16const=opt_data[1:4,4], optthr4prec=opt_data[1:4,5], optthr8prec=opt_data[1:4,6],optthr16prec=opt_data[1:4,7])
data <- data.frame(nodes =  orig_data[1:4,1], thr4prec=orig_data[1:4,5],thr8prec=orig_data[1:4,6],thr16prec=orig_data[1:4,7],optthr4prec=opt_data[1:4,5], optthr8prec=opt_data[1:4,6],optthr16prec=opt_data[1:4,7])
df <- melt(data ,  id = 'nodes', variable_name = 'versions')
ggplot(df, aes(x=nodes,y=value, group=versions, colour=versions)) + geom_line() + scale_fill_hue()
#+end_src

#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:five
#+caption: Chord simulation, Precise Model. Original version vs. Adaptative algorithm.
#+results: adapt-algorithm
[[file:adapt-algorithm.pdf]]


#+LaTeX: \section{Conclusion}\label{sec:cc}

#+LaTeX: \section{References}\label{sec:ref}

#+LaTeX: \end{document}
